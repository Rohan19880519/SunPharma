<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Adhoc Fees</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        /* Global styles for the body */
        body {
            font-family: 'Century Gothic', sans-serif; /* Sets the font family */
            background-color: #f0f4f8; /* Light background color */
            margin: 0;
            padding: 0;
        }

        /* Adjust Logo */
        .navbar .logo img {
            height: 50px; /* Sets the logo height */
            width: auto; /* Keeps the aspect ratio */
            margin-right: 10px; /* Space to the right of the logo */
        }

        /* Navbar styles */
        .navbar {
            background-color: #7b8b9c; /* Navbar background color */
            position: fixed; /* Fixes the navbar at the top */
            top: 0; /* Positions it at the very top */
            width: 98%; /* Full width */
            z-index: 1000; /* Stacks it above other elements */
            display: flex; /* Uses flexbox for layout */
            justify-content: space-between; /* Spaces items evenly */
            align-items: center; /* Vertically centers items */
            padding: 10px 20px; /* Padding inside the navbar */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Adds shadow */
        }

        .navbar ul {
            list-style-type: none; /* Removes bullet points */
            margin: 0;
            padding: 0;
            display: flex; /* Displays list items horizontally */
            gap: 5px; /* Space between menu items */
        }

        .navbar ul li {
            position: relative; /* For positioning dropdowns */
        }

        .navbar ul li a {
            display: block; /* Makes the link fill the list item */
            padding: 8px 12px; /* Padding around the link */
            color: #ecf0f1; /* Link text color */
            text-decoration: none; /* Removes underline */
            font-weight: normal; /* Normal font weight (not bold) */
            transition: background-color 0.3s ease; /* Smooth hover effect */
        }

        .navbar ul li a:hover {
            background-color: #e27618; /* Background on hover */
            border-radius: 5px; /* Rounds the corners */
        }

        .navbar ul li a.active {
            background-color: #7b8b9c; /* Active link background */
            color: #ffffff; /* Active link text color */
        }

        /* Dropdown menu styles */
        .dropdown {
            display: none; /* Hidden by default */
            position: absolute; /* Positioned relative to parent */
            background-color: #7b8b9c; /* Background color */
            min-width: 160px; /* Minimum width */
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1); /* Adds shadow */
            z-index: 1; /* Stacks above other elements */
            top: 100%; /* Positions below the parent */
            left: 0; /* Aligns to the left */
            opacity: 0; /* Transparent */
            transition: opacity 0.3s ease; /* Fade-in effect */
        }

        /* Shows the dropdown on hover or focus */
        .navbar ul li:hover .dropdown,
        .navbar ul li:focus-within .dropdown {
            display: block; /* Makes it visible */
            opacity: 1; /* Fully opaque */
        }

        .dropdown a {
            padding: 12px 16px; /* Padding inside dropdown links */
            text-decoration: none; /* Removes underline */
            display: block; /* Fills the container */
            color: #ffffff; /* Text color */
            text-align: left; /* Left-aligns text */
        }

        .dropdown a:hover {
            background-color: #e27618; /* Background on hover */
        }

        /* Main content styles */
        .content {
            padding-top: 150px;
            color: #7b8b9c;
            padding: 30px;
            text-align: center;
        }

        h1 {
            color: #7b8b9c;
            margin-bottom: 20px;
            font-size: 2.5rem;
        }

        /* Table styles */
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #ffffff;
            margin-bottom: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        th, td {
            border: 1px solid #dfe6e9;
            padding: 10px;
            text-align: left;
        }

        th {
            background-color: #7b8b9c;
            color: #ffffff;
        }

        td {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* Slider switch styles */
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: 0.4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: 0.4s;
        }

        input:checked + .slider {
            background-color: #4caf50;
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .slider.round {
            border-radius: 34px;
        }

        .slider.round:before {
            border-radius: 50%;
        }

        .edit-btn, .delete-btn {
            cursor: pointer;
            padding: 5px 10px;
            color: white;
            background-color: #7b8b9c;
            border: none;
            border-radius: 5px;
        }

        .edit-btn:hover, .delete-btn:hover {
            background-color: #e27618;
        }

        .message {
            display: none;
            padding: 10px;
            background-color: #4caf50;
            color: white;
            border-radius: 5px;
        }

        .error-message {
            display: none;
            padding: 10px;
            background-color: #f44336;
            color: white;
            border-radius: 5px;
        }

        /* Upload form styles */
        .upload-form {
            margin-bottom: 20px;
            text-align: center;
        }

        .upload-form input[type="file"], .upload-form button {
            padding: 10px;
            background-color: #7ed957;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .upload-form button {
            margin-left: 10px;
        }

        .upload-form input[type="file"] {
            cursor: pointer;
        }

        /* Modal styles */
		.modal {
			display: none; /* Hidden by default, it will be shown when triggered */
			position: fixed; /* Fixed position for consistent positioning */
			z-index: 1001; /* Ensures it appears on top */
			left: 0;
			top: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
			justify-content: center; /* Horizontally centers the modal */
			align-items: center; /* Vertically centers the modal */
		}

		.modal-content {
			background-color: #fff;
			padding: 20px;
			width: 40%; /* Width of the modal */
			max-width: 500px; /* Max width to prevent stretching */
			border-radius: 10px;
			text-align: left;
			box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); /* Adds shadow for depth */
			position: relative; /* Positioned relative to its container */
		}

        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-btn:hover {
            color: #000;
            cursor: pointer;
        }
		
		    /* Orange button style */
    .add-btn {
        background-color: #e27618; /* Orange color */
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }

    /* Button hover effect */
    .add-btn:hover {
        background-color: #d16510; /* Darker orange on hover */
    }
</style>
</head>
<body>

<!-- Navbar -->
<nav class="navbar">
    <a href="/home" class="logo">
        <img src="/assets/logo.png" alt="Company Logo">
    </a>
    <ul>
        <li><a href="/home">Home</a></li>
        <li>
            <a href="/customers">Customers</a>
            <ul class="dropdown">
                <li><a href="/customers/groups">Groups</a></li>
                <li><a href="/customers/wholesalers">Wholesalers</a></li>
            </ul>
        </li>
        <li><a href="/sales">Sales</a></li>
        <li>
            <a href="/financials">Financials</a>
            <ul class="dropdown">
                <li><a href="/financials/tiers">Tiers</a></li>
                <li><a href="/financials/adhoc">Ad-Hoc</a></li>
                <li><a href="/financials/targets">Targets</a></li>
                <li><a href="/financials/tax-invoices">Tax Invoices</a></li>
                <li><a href="/financials/company-details">Company Details</a></li> <!-- New Company Details link -->
            </ul>
        </li>
        <li><a href="/logout">Logout</a></li>
    </ul>
</nav>


<div id="message" class="message">Action completed successfully!</div>
<div id="errorMessage" class="error-message">An error occurred.</div>


<!-- Main Content -->
<br>
<div class="content">
    <h1>Ad-Hoc Fees</h1>
<!-- Upload Form Section -->
<div class="upload-form">
    <h2>Upload Ad-Hoc Fees</h2>
    <form id="uploadForm" enctype="multipart/form-data">
        <input type="file" name="file" id="file" required><br><br>
        <button type="submit">Submit</button>
    </form>
</div>
    <!-- Products Table -->
    <table id="productsTable">
        <thead>
            <tr>
                <th>Products Description</th>
                <th>Quantity to Qualify</th>
                <th>Data Fee %</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dynamic rows will be inserted here -->
        </tbody>
    </table>

    <!-- Button to Open Add Ad-Hoc Fee Modal -->
    <button class="add-btn" onclick="openAddAdhocModal()">Add New Ad-Hoc Fee</button>

    <!-- Add New Ad-Hoc Fee Modal -->
    <div class="modal" id="addAdhocModal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeAddAdhocModal()">&times;</span>
            <h2>Add New Ad-Hoc Fee</h2>
            <form id="addAdhocForm">
                <div class="form-group">
                    <label for="productsDescription">Products Description:</label>
                    <input type="text" name="productsDescription" id="productsDescription" required>
                </div>
                <div class="form-group">
                    <label for="quantityToQualify">Quantity to Qualify:</label>
                    <input type="number" name="quantityToQualify" id="quantityToQualify" required>
                </div>
                <div class="form-group">
                    <label for="dataFee">Data Fee %:</label>
                    <input type="number" name="dataFee" id="dataFee" step="0.01" required>
                </div>
                <button type="submit">Add Ad-Hoc Fee</button>
            </form>
        </div>
    </div>
</div>

<script>
    // Function to open the modal for adding a new Ad-Hoc Fee
    function openAddAdhocModal() {
        // Clear the form fields
        document.getElementById('productsDescription').value = '';
        document.getElementById('quantityToQualify').value = '';
        document.getElementById('dataFee').value = '';

        // Change modal title and button text for adding
        document.querySelector('.modal-content h2').textContent = 'Add New Ad-Hoc Fee';
        document.querySelector('#addAdhocForm button').textContent = 'Add Ad-Hoc Fee';

        // Clear any ID from the form so it knows it's an Add action
        document.getElementById('addAdhocForm').removeAttribute('data-id');

        // Show the modal
        document.getElementById('addAdhocModal').style.display = 'flex';
    }

    // Function to close the modal
    function closeAddAdhocModal() {
        document.getElementById('addAdhocModal').style.display = 'none';
    }

    // Function to open the modal for editing an Ad-Hoc Fee
    function openEditAdhocModal(productsDescription, quantityToQualify, dataFee, id) {
        // Populate the form fields with existing data
        document.getElementById('productsDescription').value = productsDescription;
        document.getElementById('quantityToQualify').value = quantityToQualify;
        document.getElementById('dataFee').value = parseFloat(dataFee).toFixed(2); // Ensure proper formatting

        // Change modal title and button text for editing
        document.querySelector('.modal-content h2').textContent = 'Edit Ad-Hoc Fee';
        document.querySelector('#addAdhocForm button').textContent = 'Save Changes';

        // Attach the ID to the form so it knows it's an Edit action
        document.getElementById('addAdhocForm').setAttribute('data-id', id);

        // Show the modal
        document.getElementById('addAdhocModal').style.display = 'flex';
    }

    // Handle Add/Edit Adhoc Form submission
    document.getElementById('addAdhocForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const productsDescription = document.getElementById('productsDescription').value;
        const quantityToQualify = document.getElementById('quantityToQualify').value;
        const dataFee = document.getElementById('dataFee').value;
        const id = document.getElementById('addAdhocForm').getAttribute('data-id'); // Retrieve the ID

        const method = id ? 'PUT' : 'POST'; // Determine if it's an update or create action
        const url = id ? `/financials/adhoc/${id}/edit` : '/financials/adhoc/add'; // Adjust the API URL for edit

        try {
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productsDescription: productsDescription,
                    quantityToQualify: quantityToQualify,
                    dataFee: parseFloat(dataFee).toFixed(2) // Ensure correct data format
                })
            });

            const result = await response.json();
            if (result.success) {
                document.getElementById('message').textContent = id ? 'Ad-Hoc Fee updated successfully!' : 'Ad-Hoc Fee added successfully!';
                document.getElementById('message').style.display = 'block';

                // Reload the table with updated data
                fetchAdhocFees();

                setTimeout(() => {
                    document.getElementById('message').style.display = 'none';
                    closeAddAdhocModal();
                }, 3000);
            } else {
                document.getElementById('errorMessage').textContent = result.message;
                document.getElementById('errorMessage').style.display = 'block';
                setTimeout(() => document.getElementById('errorMessage').style.display = 'none', 3000);
            }
        } catch (error) {
            document.getElementById('errorMessage').textContent = 'Failed to process Ad-Hoc Fee';
            document.getElementById('errorMessage').style.display = 'block';
            setTimeout(() => document.getElementById('errorMessage').style.display = 'none', 3000);
        }
    });

    // Function to delete an Ad-Hoc Fee with a quick disappearing confirmation message
    async function deleteAdhoc(id) {
        try {
            const response = await fetch(`/financials/adhoc/${id}/delete`, {
                method: 'DELETE'
            });

            const result = await response.json();
            if (result.success) {
                // Display success message quickly
                const messageElement = document.getElementById('message');
                messageElement.textContent = 'Ad-Hoc Fee deleted successfully!';
                messageElement.style.display = 'block';

                // Reload the table with updated data
                fetchAdhocFees();

                // Make the message disappear after 3 seconds
                setTimeout(() => {
                    messageElement.style.display = 'none';
                }, 3000);
            } else {
                const errorElement = document.getElementById('errorMessage');
                errorElement.textContent = result.message;
                errorElement.style.display = 'block';

                // Make the error message disappear after 3 seconds
                setTimeout(() => {
                    errorElement.style.display = 'none';
                }, 3000);
            }
        } catch (error) {
            const errorElement = document.getElementById('errorMessage');
            errorElement.textContent = 'Failed to delete Ad-Hoc Fee';
            errorElement.style.display = 'block';

            // Make the error message disappear after 3 seconds
            setTimeout(() => {
                errorElement.style.display = 'none';
            }, 3000);
        }
    }

    // Fetch Adhoc Fees and populate the table
    async function fetchAdhocFees() {
        try {
            const response = await fetch('/financials/adhoc/list');
            const result = await response.json();

            if (result.success) {
                populateTable(result.data);
            } else {
                console.error('Failed to fetch Ad-Hoc Fees:', result.message);
            }
        } catch (error) {
            console.error('Error fetching Ad-Hoc Fees:', error);
        }
    }

    // Populate the table with the fetched data and attach edit button events
    function populateTable(fees) {
        const tableBody = document.querySelector('#productsTable tbody');
        tableBody.innerHTML = ''; // Clear existing rows

        fees.forEach(fee => {
            const row = document.createElement('tr');
            row.setAttribute('data-id', fee.id); // Attach the id to the row

            row.innerHTML = `
                <td>${fee.products_description}</td>
                <td>${fee.quantity_to_qualify}</td>
                <td>${parseFloat(fee.data_fee).toFixed(2)}%</td> <!-- Ensure correct formatting -->
                <td>
                    <button class="edit-btn">Edit</button>
                    <button class="delete-btn" onclick="deleteAdhoc(${fee.id})">Delete</button>
                </td>
            `;

            // Attach the event listener for the edit button
            const editButton = row.querySelector('.edit-btn');
            attachEditButtonEvent(editButton, fee);

            tableBody.appendChild(row);
        });
    }

    // Dynamically attach the edit button's event listener to avoid passing values directly in the HTML
    function attachEditButtonEvent(button, fee) {
        button.addEventListener('click', function() {
            openEditAdhocModal(fee.products_description, fee.quantity_to_qualify, fee.data_fee, fee.id);
        });
    }

    // Call the fetch function when the page loads
    window.onload = fetchAdhocFees;

    // Handle file upload
    document.getElementById('uploadForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const fileInput = document.getElementById('file');
        const file = fileInput.files[0];
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('/financials/adhoc/upload', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                document.getElementById('message').textContent = 'File uploaded and processed successfully!';
                document.getElementById('message').style.display = 'block';
                setTimeout(() => {
                    document.getElementById('message').style.display = 'none';
                }, 3000);
            } else {
                document.getElementById('errorMessage').textContent = result.message;
                document.getElementById('errorMessage').style.display = 'block';
                setTimeout(() => {
                    document.getElementById('errorMessage').style.display = 'none';
                }, 3000);
            }
        } catch (error) {
            console.error('Error uploading file:', error);
            document.getElementById('errorMessage').textContent = 'Failed to upload file';
            document.getElementById('errorMessage').style.display = 'block';
            setTimeout(() => {
                document.getElementById('errorMessage').style.display = 'none';
            }, 3000);
        }
    });
</script>


</body>
</html>
